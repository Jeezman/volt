// Tests to check that descriptors are imported and generated correctly
import {parseDescriptor} from './../../modules/descriptors';
import {
    nativeWalletDescriptorRegex,
    wrappedWalletDescriptorRegex,
} from '../../modules/re';

describe('testing descriptor type extraction', () => {
    test('descriptor type matches', () => {
        const descriptor =
            'wpkh([188ed79c/84h/1h/0h]tpubD6NzVbkrYhZ4XopgwuDUxX9FnNeZUfidCDusmRfUkzLaVKY2zNNYtqj1frtBbqTSBcHKxsbtUjD4WSDGBwiMn7mLuuWEf5WzvJKMamGNGgG/0/*)';
        const descriptor_type = 'wpkh';

        const parts = parseDescriptor(descriptor);

        expect(parts.type).toBe(descriptor_type);
    });
});

describe('testing descriptor checksum extraction', () => {
    test('descriptor checksum matches', () => {
        const descriptor =
            "wpkh([c65d79d8/84'/0'/0']xpub6CmNYqKyLZdq1BsTyixhuNkKoa3Dt6J9pgUXjA742t7b44xAwjXZak6GvYBPda15ZqKkWippbVkCHYvHMQGuuhVsu2ohkgaVioYcNxZmEvH/0/*)#ur90lsda";
        const descriptor_checksum = '#ur90lsda';

        const parts = parseDescriptor(descriptor);

        expect(parts.checksum).toBe(descriptor_checksum);
    });
});

describe('testing descriptor fingerprint extraction', () => {
    test('descriptor fingerprint matches', () => {
        const descriptor =
            'wpkh([188ed79c/84h/1h/0h]tpubD6NzVbkrYhZ4XopgwuDUxX9FnNeZUfidCDusmRfUkzLaVKY2zNNYtqj1frtBbqTSBcHKxsbtUjD4WSDGBwiMn7mLuuWEf5WzvJKMamGNGgG/0/*)';
        const descriptor_fingerprint = '188ed79c';

        const parts = parseDescriptor(descriptor);

        expect(parts.fingerprint).toBe(descriptor_fingerprint);
    });
});

// Exhaust all the different descriptor formats we accept in the app
describe('testing descriptor regex allowed patterns', () => {
    test('descriptor regex tests passed', () => {
        /** Accepted descriptors
         * Old Style wpkh(tpub...)
         *
         * Note: must include checksum
         * external BDK public descriptor wpkh([d34db33f/84'/1'/0']tpub.../0/*)#checksum
         * private BDK public descriptor wpkh(tpub.../84'/0'/0'/0/*)#checksum
         *
         * Exceptions:
         *
         * External BDK public descriptor
         * ----
         * missing checksum wpkh([fingerprint/84'/0'/0']xpub.../0/*)
         *
         * External Private public descriptor
         * ----
         * missing checksum wpkh([fingerprint/84'/0'/0']xprv.../0/*)
         **/

        const descriptorsList = [
            // Old style descriptor (from older descriptor)
            [
                'wpkh(tpubD6NzVbkrYhZ4XopgwuDUxX9FnNeZUfidCDusmRfUkzLaVKY2zNNYtqj1frtBbqTSBcHKxsbtUjD4WSDGBwiMn7mLuuWEf5WzvJKMamGNGgG)',
                'old style descriptor',
            ],
            // public descriptor fingerprint + path + key path
            [
                "pkh([d34db33f/44'/0'/0']xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/1/*)",
                'public descriptor fingerprint + path + key path',
            ],
            // public descriptor + fingerprint + path
            [
                'wpkh([188ed79c/84h/1h/0h]tpubD6NzVbkrYhZ4XopgwuDUxX9FnNeZUfidCDusmRfUkzLaVKY2zNNYtqj1frtBbqTSBcHKxsbtUjD4WSDGBwiMn7mLuuWEf5WzvJKMamGNGgG)',
                'public descriptor with fingerprint and path',
            ],
            // public descriptor + fingerprint + path + key path + checksum (generated by BDK)
            [
                "wpkh([c65d79d8/84'/0'/0']xpub6CmNYqKyLZdq1BsTyixhuNkKoa3Dt6J9pgUXjA742t7b44xAwjXZak6GvYBPda15ZqKkWippbVkCHYvHMQGuuhVsu2ohkgaVioYcNxZmEvH/0/*)#ur90lsda",
                'public descriptor with fingerprint, path, key path, and checksum',
            ],
            // private descriptor + trailing path + key path + checksum (generated by BDK)
            [
                "wpkh(tprv8ZgxMBicQKsPdCaKK9HTNU45tMEbMDugaZc1mPzt9a2Wzdo31zRGMdoeKYKJz6aNg7oz9togxkV62bnGWYZ94VSAeETfPNWNhetjZY7hQPP/84'/1'/0'/0/*)#59fe4zeu",
                'private descriptor with trailing path and key path',
            ],
        ];

        // Wrapped Descriptors
        const wrappedDescriptorsList = [
            // Old descriptor (from older descriptor)
            [
                'sh(wpkh(tpubDDiPyw7zazwzTRbs5WBLm7iRzxbgudBnzf7xMuUoxbNPTz1HwFtVVqwqMjkqMGkSaq89KguWaHytTgiyDoTBMoX7P2N95cnuWR1A9Cnwmz7))',
                'old style nested descriptor',
            ],
            // Public Descriptor + fingerprint + path
            [
                "sh(wpkh([54cb71c5/49'/1'/0']tpubDDiPyw7zazwzTRbs5WBLm7iRzxbgudBnzf7xMuUoxbNPTz1HwFtVVqwqMjkqMGkSaq89KguWaHytTgiyDoTBMoX7P2N95cnuWR1A9Cnwmz7/0/*))",
                'Public descriptor with fingerprint and path',
            ],
            // Public Descriptor + fingerprint + path + key path + checksum (generated by BDK)
            [
                "sh(wpkh([54cb71c5/49'/1'/0']tpubDDiPyw7zazwzTRbs5WBLm7iRzxbgudBnzf7xMuUoxbNPTz1HwFtVVqwqMjkqMGkSaq89KguWaHytTgiyDoTBMoX7P2N95cnuWR1A9Cnwmz7/0/*))#hdklzyg8",
                'Public descriptor with fingerprint, path and checksum',
            ],
            // Private Descriptor + path + key path + checksum (generated by BDK)
            [
                "sh(wpkh(tprv8ZgxMBicQKsPdswRD9ZszsBTcBkBYnmncuuLSJH92UJYhxDmPiuGyVnUAUS8koCu3KmvL9Eo815MoBqB51VsFir6mzPkLVokXpkqVWjqFxW/49'/1'/0'/0/*))#ag9fhs2q",
                'Private descriptor with path, key path and checksum',
            ],
            // Private Descriptor + path + key path
            [
                "sh(wpkh(tprv8ZgxMBicQKsPdswRD9ZszsBTcBkBYnmncuuLSJH92UJYhxDmPiuGyVnUAUS8koCu3KmvL9Eo815MoBqB51VsFir6mzPkLVokXpkqVWjqFxW/49'/1'/0'))",
                'Private descriptor with path',
            ],
        ];

        for (const descriptor of descriptorsList) {
            expect(nativeWalletDescriptorRegex.test(descriptor[0])).toBe(true);
        }

        for (const descriptor1 of wrappedDescriptorsList) {
            expect(wrappedWalletDescriptorRegex.test(descriptor1[0])).toBe(
                true,
            );
        }
    });
});
