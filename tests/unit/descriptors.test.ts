// Tests to check that descriptors are imported and generated correctly
import {
    parseDescriptor,
    createDescriptorFromXprv,
    createDescriptorFromString,
    fromDescriptorPTR,
    fromDescriptorPublicPTR,
} from './../../modules/descriptors';
import {descriptorRegex} from '../../modules/re';
import {ENet} from '../../types/enums';

import * as descriptors from '@bitcoinerlab/descriptors';

describe('testing descriptor checksum extraction', () => {
    test('descriptor checksum matches', () => {
        const descriptor =
            "wpkh([c65d79d8/84'/0'/0']xpub6CmNYqKyLZdq1BsTyixhuNkKoa3Dt6J9pgUXjA742t7b44xAwjXZak6GvYBPda15ZqKkWippbVkCHYvHMQGuuhVsu2ohkgaVioYcNxZmEvH/0/*)#ur90lsda";
        const descriptor_checksum = '#ur90lsda';

        const parts = parseDescriptor(descriptor);

        expect(parts.checksum).toBe(descriptor_checksum);
    });
});

describe('testing descriptor fingerprint extraction', () => {
    test('descriptor fingerprint matches', () => {
        const descriptor =
            'wpkh([188ed79c/84h/1h/0h]tpubD6NzVbkrYhZ4XopgwuDUxX9FnNeZUfidCDusmRfUkzLaVKY2zNNYtqj1frtBbqTSBcHKxsbtUjD4WSDGBwiMn7mLuuWEf5WzvJKMamGNGgG/0/*)';
        const descriptor_fingerprint = '188ed79c';

        const parts = parseDescriptor(descriptor);

        expect(parts.fingerprint).toBe(descriptor_fingerprint);
    });
});

describe('testing experimental taproot from mnemonic', () => {
    test('descriptor from mnemonic (ptr)', () => {
        const privDescriptor =
            "tr(tprv8ghHZW6r86FCyWoyCT4Q7M2QqPJpgkMspG2Nq2Uz6hWq3hCBDh7qEkEnKK6LD1f1rj2Vj99W99vYFF8NuDu5gGkrLmr5RyF5gVrQurc7usZ/86'/1'/0'/0/*)";
        const mnemonic =
            'monitor glove mother power people spoon interest orbit solar faint muscle apart direct elite direct lens budget enhance decorate program boost unknown culture fabric';
        // const xprv-0 'tprv8ZgxMBicQKsPcvxdwahz6p8taceYS8eF2CVHgEdf9QYY4gzVcwGZJdjr29dYryqMfkYCnh7MM8ypP5siT8MwFBE6PrHBu9fXGHkMitjp7G3'

        // const xpub "tr([827aac3a/86'/1'/0']tpubDDPKhv96GTvsryqm66izWkgXQQpkr5YnPZdA7YXHWyKDtBSwr5wRREreVRmVY9uFCwfJLRGG7eVhevX5CKbYBvwFrpDQVDNfRyeHAjQZ6m2/0/*)"

        const taprootDescriptor = fromDescriptorPTR(mnemonic, ENet.Testnet);
        const strippedDescriptor = taprootDescriptor.priv.split('#')[0];

        expect(strippedDescriptor).toEqual(privDescriptor);
    });
});

describe('testing experimental taproot from xpub', () => {
    test('descriptor from xpub (tr)', () => {
        const xpub =
            'tpubDDPKhv96GTvsryqm66izWkgXQQpkr5YnPZdA7YXHWyKDtBSwr5wRREreVRmVY9uFCwfJLRGG7eVhevX5CKbYBvwFrpDQVDNfRyeHAjQZ6m2';

        let externalPubDescriptor = `tr([827aac3a/86'/1'/0']${xpub}/0/*)`;
        externalPubDescriptor =
            externalPubDescriptor +
            '#' +
            descriptors.checksum(externalPubDescriptor);

        const pubTemp = fromDescriptorPublicPTR(
            xpub,
            '827aac3a',
            'p2tr',
            ENet.Testnet,
        );

        expect(pubTemp.ExternalDescriptor).toEqual(externalPubDescriptor);
    });
});

// Exhaust all the different descriptor formats we accept in the app
describe('testing descriptor regex allowed patterns', () => {
    test('descriptor regex tests passed', () => {
        /** Accepted descriptors
         *
         * Note: checksum is optional
         * external BDK public descriptor wpkh([d34db33f/84'/1'/0']tpub.../0/*)#checksum
         * private BDK public descriptor wpkh(tpub.../84'/0'/0'/0/*)#checksum
         **/

        const descriptorsList: [string, boolean][] = [
            // Old style descriptor (vague descriptor)
            [
                'wpkh(tpubD6NzVbkrYhZ4XopgwuDUxX9FnNeZUfidCDusmRfUkzLaVKY2zNNYtqj1frtBbqTSBcHKxsbtUjD4WSDGBwiMn7mLuuWEf5WzvJKMamGNGgG)',
                false,
            ],
            // public descriptor fingerprint + origin path + key path
            [
                "pkh([d34db33f/44'/0'/0']xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/1/*)",
                true,
            ],
            // public descriptor + fingerprint + origin path
            [
                'wpkh([188ed79c/84h/1h/0h]tpubD6NzVbkrYhZ4XopgwuDUxX9FnNeZUfidCDusmRfUkzLaVKY2zNNYtqj1frtBbqTSBcHKxsbtUjD4WSDGBwiMn7mLuuWEf5WzvJKMamGNGgG)',
                true,
            ],
            // public descriptor + fingerprint + path + key path + checksum (generated by BDK)
            [
                "wpkh([c65d79d8/84'/0'/0']xpub6CmNYqKyLZdq1BsTyixhuNkKoa3Dt6J9pgUXjA742t7b44xAwjXZak6GvYBPda15ZqKkWippbVkCHYvHMQGuuhVsu2ohkgaVioYcNxZmEvH/0/*)#ur90lsda",
                true,
            ],
            // private descriptor + trailing path + key path + checksum (generated by BDK)
            [
                "wpkh(tprv8gVTXwc2o1FPtn2LiM7nuHJXZzCskz4D7nTHs6kEgCzukTYydTDfrUe4CkJhPfTVcEaCSZPgWTyL6i3wGsbvF6i87Mea89YdwYamM277nrr/84'/1'/0'/0/*)#wcm6z32h",
                true,
            ],
        ];

        // Wrapped Descriptors
        const wrappedDescriptorsList: [string, boolean][] = [
            // Old descriptor (from older descriptor)
            [
                'sh(wpkh(tpubDDiPyw7zazwzTRbs5WBLm7iRzxbgudBnzf7xMuUoxbNPTz1HwFtVVqwqMjkqMGkSaq89KguWaHytTgiyDoTBMoX7P2N95cnuWR1A9Cnwmz7))',
                false,
            ],
            // Public Descriptor + fingerprint + origin path + key path
            [
                "sh(wpkh([54cb71c5/49'/1'/0']tpubDDiPyw7zazwzTRbs5WBLm7iRzxbgudBnzf7xMuUoxbNPTz1HwFtVVqwqMjkqMGkSaq89KguWaHytTgiyDoTBMoX7P2N95cnuWR1A9Cnwmz7/0/*))",
                true,
            ],
            // Public Descriptor + fingerprint + path + key path + checksum (generated by BDK)
            [
                "sh(wpkh([54cb71c5/49'/1'/0']tpubDDiPyw7zazwzTRbs5WBLm7iRzxbgudBnzf7xMuUoxbNPTz1HwFtVVqwqMjkqMGkSaq89KguWaHytTgiyDoTBMoX7P2N95cnuWR1A9Cnwmz7/0/*))#hdklzyg8",
                true,
            ],
            // Private Descriptor + path + key path + checksum (generated by BDK)
            [
                "sh(wpkh(tprv8ZgxMBicQKsPdswRD9ZszsBTcBkBYnmncuuLSJH92UJYhxDmPiuGyVnUAUS8koCu3KmvL9Eo815MoBqB51VsFir6mzPkLVokXpkqVWjqFxW/49'/1'/0'/0/*))#ag9fhs2q",
                true,
            ],
            // Private Descriptor + path + origin path
            [
                "sh(wpkh(tprv8ZgxMBicQKsPdswRD9ZszsBTcBkBYnmncuuLSJH92UJYhxDmPiuGyVnUAUS8koCu3KmvL9Eo815MoBqB51VsFir6mzPkLVokXpkqVWjqFxW/49'/1'/0'))",
                true,
            ],
        ];

        for (const descriptor of descriptorsList) {
            expect(descriptorRegex.test(descriptor[0])).toBe(descriptor[1]);
        }

        for (const descriptor1 of wrappedDescriptorsList) {
            expect(descriptorRegex.test(descriptor1[0])).toBe(descriptor1[1]);
        }
    });
});

// check descriptor parts
describe('testing parsed descriptor parts', () => {
    test('descriptor parts tests passed', () => {
        const descriptor =
            "wpkh([c65d79d8/84'/0'/0']xpub6CmNYqKyLZdq1BsTyixhuNkKoa3Dt6J9pgUXjA742t7b44xAwjXZak6GvYBPda15ZqKkWippbVkCHYvHMQGuuhVsu2ohkgaVioYcNxZmEvH/0/*)#ur90lsda";
        const parsedDescriptor = parseDescriptor(descriptor);

        expect(parsedDescriptor.type).toEqual('wpkh');
        expect(parsedDescriptor.network).toEqual(ENet.Bitcoin);
        expect(parsedDescriptor.keyPath).toEqual('/0/*');
        expect(parsedDescriptor.path.replace(/'/g, 'h')).toEqual('m/84h/0h/0h');
        expect(parsedDescriptor.fingerprint).toEqual('c65d79d8');
    });
});

describe('generated descriptor from string', () => {
    test('descriptor from string tests passed', () => {
        const descriptorExternal =
            "wpkh([c65d79d8/84'/0'/0']xpub6CmNYqKyLZdq1BsTyixhuNkKoa3Dt6J9pgUXjA742t7b44xAwjXZak6GvYBPda15ZqKkWippbVkCHYvHMQGuuhVsu2ohkgaVioYcNxZmEvH/0/*)#ur90lsda";
        const descriptorInternal =
            "wpkh([c65d79d8/84'/0'/0']xpub6CmNYqKyLZdq1BsTyixhuNkKoa3Dt6J9pgUXjA742t7b44xAwjXZak6GvYBPda15ZqKkWippbVkCHYvHMQGuuhVsu2ohkgaVioYcNxZmEvH/1/*)#dhqwz9a9";

        const {internal, external} =
            createDescriptorFromString(descriptorExternal);

        expect(external).toEqual(descriptorExternal);
        expect(internal).toEqual(descriptorInternal);
    });
});

describe('generated descriptor from xprv', () => {
    test('descriptor from xprv tests passed', () => {
        // Note: no longer getting 'wpkh' as default for x/tprv/pub
        // Instead we grab the taproot
        const xprv =
            'tprv8gVTXwc2o1FPtn2LiM7nuHJXZzCskz4D7nTHs6kEgCzukTYydTDfrUe4CkJhPfTVcEaCSZPgWTyL6i3wGsbvF6i87Mea89YdwYamM277nrr';

        let descriptorPrivate =
            "tr(tprv8gVTXwc2o1FPtn2LiM7nuHJXZzCskz4D7nTHs6kEgCzukTYydTDfrUe4CkJhPfTVcEaCSZPgWTyL6i3wGsbvF6i87Mea89YdwYamM277nrr/86'/1'/0'/0/*)";
        descriptorPrivate =
            descriptorPrivate + '#' + descriptors.checksum(descriptorPrivate);
        let descriptorExternal =
            "tr([b5c34791/86'/1'/0']tpubDDBVgMeGwNw4nF48bznPJgxe91iovKF7h6459cnY6UoJawokFr3G2yFvNrkiouzTjN65PzvwY1HiuL9dY7EXwZ5DHRZ9yD9mH9eXmBZtTyn/0/*)";
        descriptorExternal =
            descriptorExternal + '#' + descriptors.checksum(descriptorExternal);
        let descriptorInternal =
            "tr([b5c34791/86'/1'/0']tpubDDBVgMeGwNw4nF48bznPJgxe91iovKF7h6459cnY6UoJawokFr3G2yFvNrkiouzTjN65PzvwY1HiuL9dY7EXwZ5DHRZ9yD9mH9eXmBZtTyn/1/*)";
        descriptorInternal =
            descriptorInternal + '#' + descriptors.checksum(descriptorInternal);

        const {internal, external, priv} = createDescriptorFromXprv(xprv);

        expect(external).toEqual(descriptorExternal);
        expect(internal).toEqual(descriptorInternal);
        expect(priv).toEqual(descriptorPrivate);
    });
});
